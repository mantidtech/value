// Code generated by valuegenerator. DO NOT EDIT

package value

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func ptrToUint(a uint) *Uint {
	x := new(Uint)
	*x = Uint(a)
	return x
}

func uintPtr(a uint) *uint {
	x := new(uint)
	*x = a
	return x
}

func TestUint_Type(t *testing.T) {
	a := new(Uint)
	assert.Equal(t, "uint", a.Type())
}

func TestUint_Zero(t *testing.T) {
	a := new(uint)
	b := new(Uint)
	assert.Equal(t, *a, b.Zero())
}

func TestUint_Clone(t *testing.T) {
	a := new(Uint)
	b := a.Clone()
	assert.Equal(t, uint(*a), b.Get())
	*a = Uint(908)
	assert.NotEqual(t, uint(*a), b.Get())
}

type TestUintGetTest struct {
	name string
	a    *Uint
	want interface{}
}

func TestUint_Get(t *testing.T) {
	for _, st := range testUintGetTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := tt.a.Get()
			assert.Equal(t, tt.want, got)
		})
	}
}

type TestUintSetTest struct {
	name    string
	s       string
	a       *Uint
	wantErr bool
}

func TestUint_Set(t *testing.T) {
	for _, st := range testUintSetTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			err := tt.a.Set(tt.s)
			if tt.wantErr {
				assert.Error(t, err)
			} else {
				assert.NoError(t, err)
			}
		})
	}
}

type TestUintStringTest struct {
	name string
	a    *Uint
	want string
}

func TestUint_String(t *testing.T) {
	for _, st := range testUintStringTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := tt.a.String()
			assert.Equal(t, tt.want, got)
		})
	}
}

type TestBindUintTest struct {
	name string
	x    *uint
	want *Uint
}

func TestBindUint(t *testing.T) {
	for _, st := range testBindUintTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := BindUint(tt.x)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestFactoryBind_Uint(t *testing.T) {
	a := uint(908)
	got := Bind(&a)
	err := got.Set("19001")
	require.NoError(t, err)
	assert.NotEqual(t, uint(908), got.Get())
	assert.Equal(t, uint(19001), got.Get())
}
