// Code generated by valuegenerator. DO NOT EDIT

package value

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func ptrToInt16(a int16) *Int16 {
	x := new(Int16)
	*x = Int16(a)
	return x
}

func int16Ptr(a int16) *int16 {
	x := new(int16)
	*x = a
	return x
}

func TestInt16_Type(t *testing.T) {
	a := new(Int16)
	assert.Equal(t, "int16", a.Type())
}

func TestInt16_Zero(t *testing.T) {
	a := new(int16)
	b := new(Int16)
	assert.Equal(t, *a, b.Zero())
}

func TestInt16_Clone(t *testing.T) {
	a := new(Int16)
	b := a.Clone()
	assert.Equal(t, int16(*a), b.Get())
	*a = Int16(25)
	assert.NotEqual(t, int16(*a), b.Get())
}

type TestInt16GetTest struct {
	name string
	a    *Int16
	want interface{}
}

func TestInt16_Get(t *testing.T) {
	for _, st := range testInt16GetTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := tt.a.Get()
			assert.Equal(t, tt.want, got)
		})
	}
}

type TestInt16SetTest struct {
	name    string
	s       string
	a       *Int16
	wantErr bool
}

func TestInt16_Set(t *testing.T) {
	for _, st := range testInt16SetTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			err := tt.a.Set(tt.s)
			if tt.wantErr {
				assert.Error(t, err)
			} else {
				assert.NoError(t, err)
			}
		})
	}
}

type TestInt16StringTest struct {
	name string
	a    *Int16
	want string
}

func TestInt16_String(t *testing.T) {
	for _, st := range testInt16StringTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := tt.a.String()
			assert.Equal(t, tt.want, got)
		})
	}
}

type TestBindInt16Test struct {
	name string
	x    *int16
	want *Int16
}

func TestBindInt16(t *testing.T) {
	for _, st := range testBindInt16TestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := BindInt16(tt.x)
			assert.Equal(t, tt.want, got)
		})
	}
}
func TestFactoryBind_Int16(t *testing.T) {
	a := int16(25)
	got := Bind(&a)
	err := got.Set("8073")
	require.NoError(t, err)
	assert.NotEqual(t, int16(25), got.Get())
	assert.Equal(t, int16(8073), got.Get())
}
