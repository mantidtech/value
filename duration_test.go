// Code generated by valuegenerator. DO NOT EDIT

package value

import (
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func ptrToDuration(a time.Duration) *Duration {
	x := new(Duration)
	*x = Duration(a)
	return x
}

func durationPtr(a time.Duration) *time.Duration {
	x := new(time.Duration)
	*x = a
	return x
}

func TestDuration_Type(t *testing.T) {
	a := new(Duration)
	assert.Equal(t, "time.Duration", a.Type())
}

func TestDuration_Zero(t *testing.T) {
	a := new(time.Duration)
	b := new(Duration)
	assert.Equal(t, *a, b.Zero())
}

func TestDuration_Clone(t *testing.T) {
	a := new(Duration)
	b := a.Clone()
	assert.Equal(t, time.Duration(*a), b.Get())
	*a = Duration(64000000)
	assert.NotEqual(t, time.Duration(*a), b.Get())
}

type TestDurationGetTest struct {
	name string
	a    *Duration
	want interface{}
}

func TestDuration_Get(t *testing.T) {
	for _, st := range testDurationGetTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := tt.a.Get()
			assert.Equal(t, tt.want, got)
		})
	}
}

type TestDurationSetTest struct {
	name    string
	s       string
	a       *Duration
	wantErr bool
}

func TestDuration_Set(t *testing.T) {
	for _, st := range testDurationSetTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			err := tt.a.Set(tt.s)
			if tt.wantErr {
				assert.Error(t, err)
			} else {
				assert.NoError(t, err)
			}
		})
	}
}

type TestDurationStringTest struct {
	name string
	a    *Duration
	want string
}

func TestDuration_String(t *testing.T) {
	for _, st := range testDurationStringTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := tt.a.String()
			assert.Equal(t, tt.want, got)
		})
	}
}

type TestBindDurationTest struct {
	name string
	x    *time.Duration
	want *Duration
}

func TestBindDuration(t *testing.T) {
	for _, st := range testBindDurationTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := BindDuration(tt.x)
			assert.Equal(t, tt.want, got)
		})
	}
}
func TestFactoryBind_Duration(t *testing.T) {
	a := time.Duration(64000000)
	got := Bind(&a)
	err := got.Set("98s")
	require.NoError(t, err)
	assert.NotEqual(t, time.Duration(64000000), got.Get())
	assert.Equal(t, time.Duration(98_000_000_000), got.Get())
}
