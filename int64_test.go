// Code generated by valuegenerator. DO NOT EDIT

package value

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func ptrToInt64(a int64) *Int64 {
	x := new(Int64)
	*x = Int64(a)
	return x
}

func int64Ptr(a int64) *int64 {
	x := new(int64)
	*x = a
	return x
}

func TestInt64_Type(t *testing.T) {
	a := new(Int64)
	assert.Equal(t, "int64", a.Type())
}

func TestInt64_Zero(t *testing.T) {
	a := new(int64)
	b := new(Int64)
	assert.Equal(t, *a, b.Zero())
}

func TestInt64_Clone(t *testing.T) {
	a := new(Int64)
	b := a.Clone()
	assert.Equal(t, int64(*a), b.Get())
	*a = Int64(74)
	assert.NotEqual(t, int64(*a), b.Get())
}

type TestInt64GetTest struct {
	name string
	a    *Int64
	want interface{}
}

func TestInt64_Get(t *testing.T) {
	for _, st := range testInt64GetTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := tt.a.Get()
			assert.Equal(t, tt.want, got)
		})
	}
}

type TestInt64SetTest struct {
	name    string
	s       string
	a       *Int64
	wantErr bool
}

func TestInt64_Set(t *testing.T) {
	for _, st := range testInt64SetTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			err := tt.a.Set(tt.s)
			if tt.wantErr {
				assert.Error(t, err)
			} else {
				assert.NoError(t, err)
			}
		})
	}
}

type TestInt64StringTest struct {
	name string
	a    *Int64
	want string
}

func TestInt64_String(t *testing.T) {
	for _, st := range testInt64StringTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := tt.a.String()
			assert.Equal(t, tt.want, got)
		})
	}
}

type TestBindInt64Test struct {
	name string
	x    *int64
	want *Int64
}

func TestBindInt64(t *testing.T) {
	for _, st := range testBindInt64TestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := BindInt64(tt.x)
			assert.Equal(t, tt.want, got)
		})
	}
}
func TestFactoryBind_Int64(t *testing.T) {
	a := int64(74)
	got := Bind(&a)
	err := got.Set("-70368744177664")
	require.NoError(t, err)
	assert.NotEqual(t, int64(74), got.Get())
	assert.Equal(t, int64(-2<<45), got.Get())
}
