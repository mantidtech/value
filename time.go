// Code generated by valuegenerator. DO NOT EDIT

package value

import (
	"time"
)

// Time implements the value interface for the time.Time type
type Time time.Time

// Type returns the underlying type of the value as a string
func (t *Time) Type() string {
	return "time.Time"
}

// Get returns the underlying value as an interface{}
func (t *Time) Get() interface{} {
	return time.Time(*t)
}

// Set a value from a string
func (t *Time) Set(val string) error {
	r, err := time.Parse(time.RFC3339, val)
	if err == nil {
		*t = Time(r)
	}
	return err
}

// String returns the value as a string
func (t *Time) String() string {
	return time.Time(*t).Format(time.RFC3339)
}

// Clone duplicates the Time as a copy of the instance
func (t *Time) Clone() Value {
	ptr := new(Time)
	*ptr = *t
	return ptr
}

// Zero returns the zero value of the underlying primitive
func (t *Time) Zero() interface{} {
	ptr := new(time.Time)
	return *ptr
}

// BindTime returns a new Time with the underlying time.Time used for state.
func BindTime(t *time.Time) *Time {
	return (*Time)(t)
}
