// Code generated by valuegenerator. DO NOT EDIT

package value

import (
	"strconv"
)

// Uint implements the value interface for the uint type
type Uint uint

// Type returns the underlying type of the value as a string
func (u *Uint) Type() string {
	return "uint"
}

// Get returns the underlying value as an interface{}
func (u *Uint) Get() interface{} {
	return uint(*u)
}

// Set a value from a string
func (u *Uint) Set(val string) error {
	r, err := strconv.ParseUint(val, 0, 16)
	if err == nil {
		*u = Uint(r)
	}
	return err
}

// String returns the value as a string
func (u *Uint) String() string {
	return strconv.FormatUint(uint64(*u), 10)
}

// Clone duplicates the Uint as a copy of the instance
func (u *Uint) Clone() Value {
	ptr := new(Uint)
	*ptr = *u
	return ptr
}

// Zero returns the zero value of the underlying primitive
func (u *Uint) Zero() interface{} {
	ptr := new(uint)
	return *ptr
}

// BindUint returns a new Uint with the underlying uint used for state.
func BindUint(u *uint) *Uint {
	return (*Uint)(u)
}
