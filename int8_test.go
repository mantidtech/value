// Code generated by valuegenerator. DO NOT EDIT

package value

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func ptrToInt8(a int8) *Int8 {
	x := new(Int8)
	*x = Int8(a)
	return x
}

func int8Ptr(a int8) *int8 {
	x := new(int8)
	*x = a
	return x
}

func TestInt8_Type(t *testing.T) {
	a := new(Int8)
	assert.Equal(t, "int8", a.Type())
}

func TestInt8_Zero(t *testing.T) {
	a := new(int8)
	b := new(Int8)
	assert.Equal(t, *a, b.Zero())
}

func TestInt8_Clone(t *testing.T) {
	a := new(Int8)
	b := a.Clone()
	assert.Equal(t, int8(*a), b.Get())
	*a = Int8(-2)
	assert.NotEqual(t, int8(*a), b.Get())
}

type TestInt8GetTest struct {
	name string
	a    *Int8
	want interface{}
}

func TestInt8_Get(t *testing.T) {
	for _, st := range testInt8GetTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := tt.a.Get()
			assert.Equal(t, tt.want, got)
		})
	}
}

type TestInt8SetTest struct {
	name    string
	s       string
	a       *Int8
	wantErr bool
}

func TestInt8_Set(t *testing.T) {
	for _, st := range testInt8SetTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			err := tt.a.Set(tt.s)
			if tt.wantErr {
				assert.Error(t, err)
			} else {
				assert.NoError(t, err)
			}
		})
	}
}

type TestInt8StringTest struct {
	name string
	a    *Int8
	want string
}

func TestInt8_String(t *testing.T) {
	for _, st := range testInt8StringTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := tt.a.String()
			assert.Equal(t, tt.want, got)
		})
	}
}

type TestBindInt8Test struct {
	name string
	x    *int8
	want *Int8
}

func TestBindInt8(t *testing.T) {
	for _, st := range testBindInt8TestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := BindInt8(tt.x)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestFactoryBind_Int8(t *testing.T) {
	a := int8(-2)
	got := Bind(&a)
	err := got.Set("50")
	require.NoError(t, err)
	assert.NotEqual(t, int8(-2), got.Get())
	assert.Equal(t, int8(50), got.Get())
}
