// Code generated by valuegenerator. DO NOT EDIT

package value

import (
	"time"
)

// Duration implements the value interface for the time.Duration type
type Duration time.Duration

// Type returns the underlying type of the value as a string
func (t *Duration) Type() string {
	return "time.Duration"
}

// Get returns the underlying value as an interface{}
func (t *Duration) Get() interface{} {
	return time.Duration(*t)
}

// Set a value from a string
func (t *Duration) Set(val string) error {
	r, err := time.ParseDuration(val)
	if err == nil {
		*t = Duration(r)
	}
	return err
}

// String returns the value as a string
func (t *Duration) String() string {
	return time.Duration(*t).String()
}

// Clone duplicates the Duration as a copy of the instance
func (t *Duration) Clone() Value {
	ptr := new(Duration)
	*ptr = *t
	return ptr
}

// Zero returns the zero value of the underlying primitive
func (t *Duration) Zero() interface{} {
	ptr := new(time.Duration)
	return *ptr
}

// BindDuration returns a new Duration with the underlying time.Duration used for state.
func BindDuration(t *time.Duration) *Duration {
	return (*Duration)(t)
}
