// Code generated by valuegenerator. DO NOT EDIT

package value

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func ptrToComplex64(a complex64) *Complex64 {
	x := new(Complex64)
	*x = Complex64(a)
	return x
}

func complex64Ptr(a complex64) *complex64 {
	x := new(complex64)
	*x = a
	return x
}

func TestComplex64_Type(t *testing.T) {
	a := new(Complex64)
	assert.Equal(t, "complex64", a.Type())
}

func TestComplex64_Zero(t *testing.T) {
	a := new(complex64)
	b := new(Complex64)
	assert.Equal(t, *a, b.Zero())
}

func TestComplex64_Clone(t *testing.T) {
	a := new(Complex64)
	b := a.Clone()
	assert.Equal(t, complex64(*a), b.Get())
	*a = Complex64(complex(12, 6))
	assert.NotEqual(t, complex64(*a), b.Get())
}

type TestComplex64GetTest struct {
	name string
	a    *Complex64
	want interface{}
}

func TestComplex64_Get(t *testing.T) {
	for _, st := range testComplex64GetTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := tt.a.Get()
			assert.Equal(t, tt.want, got)
		})
	}
}

type TestComplex64SetTest struct {
	name    string
	s       string
	a       *Complex64
	wantErr bool
}

func TestComplex64_Set(t *testing.T) {
	for _, st := range testComplex64SetTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			err := tt.a.Set(tt.s)
			if tt.wantErr {
				assert.Error(t, err)
			} else {
				assert.NoError(t, err)
			}
		})
	}
}

type TestComplex64StringTest struct {
	name string
	a    *Complex64
	want string
}

func TestComplex64_String(t *testing.T) {
	for _, st := range testComplex64StringTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := tt.a.String()
			assert.Equal(t, tt.want, got)
		})
	}
}

type TestBindComplex64Test struct {
	name string
	x    *complex64
	want *Complex64
}

func TestBindComplex64(t *testing.T) {
	for _, st := range testBindComplex64TestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := BindComplex64(tt.x)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestFactoryBind_Complex64(t *testing.T) {
	a := complex64(complex(12, 6))
	got := Bind(&a)
	err := got.Set("-2+9i")
	require.NoError(t, err)
	assert.NotEqual(t, complex64(complex(12, 6)), got.Get())
	assert.Equal(t, complex64(complex(-2, 9)), got.Get())
}
