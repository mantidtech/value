// Code generated by valuegenerator. DO NOT EDIT

package value

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func ptrToUint32(a uint32) *Uint32 {
	x := new(Uint32)
	*x = Uint32(a)
	return x
}

func uint32Ptr(a uint32) *uint32 {
	x := new(uint32)
	*x = a
	return x
}

func TestUint32_Type(t *testing.T) {
	a := new(Uint32)
	assert.Equal(t, "uint32", a.Type())
}

func TestUint32_Zero(t *testing.T) {
	a := new(uint32)
	b := new(Uint32)
	assert.Equal(t, *a, b.Zero())
}

func TestUint32_Clone(t *testing.T) {
	a := new(Uint32)
	b := a.Clone()
	assert.Equal(t, uint32(*a), b.Get())
	*a = Uint32(78465734)
	assert.NotEqual(t, uint32(*a), b.Get())
}

type TestUint32GetTest struct {
	name string
	a    *Uint32
	want interface{}
}

func TestUint32_Get(t *testing.T) {
	for _, st := range testUint32GetTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := tt.a.Get()
			assert.Equal(t, tt.want, got)
		})
	}
}

type TestUint32SetTest struct {
	name    string
	s       string
	a       *Uint32
	wantErr bool
}

func TestUint32_Set(t *testing.T) {
	for _, st := range testUint32SetTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			err := tt.a.Set(tt.s)
			if tt.wantErr {
				assert.Error(t, err)
			} else {
				assert.NoError(t, err)
			}
		})
	}
}

type TestUint32StringTest struct {
	name string
	a    *Uint32
	want string
}

func TestUint32_String(t *testing.T) {
	for _, st := range testUint32StringTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := tt.a.String()
			assert.Equal(t, tt.want, got)
		})
	}
}

type TestBindUint32Test struct {
	name string
	x    *uint32
	want *Uint32
}

func TestBindUint32(t *testing.T) {
	for _, st := range testBindUint32TestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := BindUint32(tt.x)
			assert.Equal(t, tt.want, got)
		})
	}
}
func TestFactoryBind_Uint32(t *testing.T) {
	a := uint32(78465734)
	got := Bind(&a)
	err := got.Set("31902")
	require.NoError(t, err)
	assert.NotEqual(t, uint32(78465734), got.Get())
	assert.Equal(t, uint32(31902), got.Get())
}
