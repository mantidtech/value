// Code generated by valuegenerator. DO NOT EDIT

package value

import "fmt"

// Byte implements the value interface for the byte type
type Byte byte

// Type returns the underlying type of the value as a string
func (b *Byte) Type() string {
	return "byte"
}

// Get returns the underlying value as an interface{}
func (b *Byte) Get() interface{} {
	return byte(*b)
}

// Set a value from a string
func (b *Byte) Set(val string) error {
	bs := []byte(val)
	if len(bs) != 1 {
		return fmt.Errorf("string wrong size '%s' (%d bytes) to convert to byte", val, len(bs))
	}
	*b = Byte(bs[0])
	return nil
}

// String returns the value as a string
func (b *Byte) String() string {
	return string(*b)
}

// Clone duplicates the Byte as a copy of the instance
func (b *Byte) Clone() Value {
	ptr := new(Byte)
	*ptr = *b
	return ptr
}

// Zero returns the zero value of the underlying primitive
func (b *Byte) Zero() interface{} {
	ptr := new(byte)
	return *ptr
}

// BindByte returns a new Byte with the underlying byte used for state.
func BindByte(b *byte) *Byte {
	return (*Byte)(b)
}
