// Code generated by valuegenerator. DO NOT EDIT

package value

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func ptrToUint8(a uint8) *Uint8 {
	x := new(Uint8)
	*x = Uint8(a)
	return x
}

func uint8Ptr(a uint8) *uint8 {
	x := new(uint8)
	*x = a
	return x
}

func TestUint8_Type(t *testing.T) {
	a := new(Uint8)
	assert.Equal(t, "uint8", a.Type())
}

func TestUint8_Zero(t *testing.T) {
	a := new(uint8)
	b := new(Uint8)
	assert.Equal(t, *a, b.Zero())
}

func TestUint8_Clone(t *testing.T) {
	a := new(Uint8)
	b := a.Clone()
	assert.Equal(t, uint8(*a), b.Get())
	*a = Uint8(3)
	assert.NotEqual(t, uint8(*a), b.Get())
}

type TestUint8GetTest struct {
	name string
	a    *Uint8
	want interface{}
}

func TestUint8_Get(t *testing.T) {
	for _, st := range testUint8GetTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := tt.a.Get()
			assert.Equal(t, tt.want, got)
		})
	}
}

type TestUint8SetTest struct {
	name    string
	s       string
	a       *Uint8
	wantErr bool
}

func TestUint8_Set(t *testing.T) {
	for _, st := range testUint8SetTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			err := tt.a.Set(tt.s)
			if tt.wantErr {
				assert.Error(t, err)
			} else {
				assert.NoError(t, err)
			}
		})
	}
}

type TestUint8StringTest struct {
	name string
	a    *Uint8
	want string
}

func TestUint8_String(t *testing.T) {
	for _, st := range testUint8StringTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := tt.a.String()
			assert.Equal(t, tt.want, got)
		})
	}
}

type TestBindUint8Test struct {
	name string
	x    *uint8
	want *Uint8
}

func TestBindUint8(t *testing.T) {
	for _, st := range testBindUint8TestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := BindUint8(tt.x)
			assert.Equal(t, tt.want, got)
		})
	}
}
