// Code generated by valuegenerator. DO NOT EDIT

package value

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func ptrToByte(a byte) *Byte {
	x := new(Byte)
	*x = Byte(a)
	return x
}

func bytePtr(a byte) *byte {
	x := new(byte)
	*x = a
	return x
}

func TestByte_Type(t *testing.T) {
	a := new(Byte)
	assert.Equal(t, "byte", a.Type())
}

func TestByte_Zero(t *testing.T) {
	a := new(byte)
	b := new(Byte)
	assert.Equal(t, *a, b.Zero())
}

func TestByte_Clone(t *testing.T) {
	a := new(Byte)
	b := a.Clone()
	assert.Equal(t, byte(*a), b.Get())
	*a = Byte(0x69)
	assert.NotEqual(t, byte(*a), b.Get())
}

type TestByteGetTest struct {
	name string
	a    *Byte
	want interface{}
}

func TestByte_Get(t *testing.T) {
	for _, st := range testByteGetTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := tt.a.Get()
			assert.Equal(t, tt.want, got)
		})
	}
}

type TestByteSetTest struct {
	name    string
	s       string
	a       *Byte
	wantErr bool
}

func TestByte_Set(t *testing.T) {
	for _, st := range testByteSetTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			err := tt.a.Set(tt.s)
			if tt.wantErr {
				assert.Error(t, err)
			} else {
				assert.NoError(t, err)
			}
		})
	}
}

type TestByteStringTest struct {
	name string
	a    *Byte
	want string
}

func TestByte_String(t *testing.T) {
	for _, st := range testByteStringTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := tt.a.String()
			assert.Equal(t, tt.want, got)
		})
	}
}

type TestBindByteTest struct {
	name string
	x    *byte
	want *Byte
}

func TestBindByte(t *testing.T) {
	for _, st := range testBindByteTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := BindByte(tt.x)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestFactoryBind_Byte(t *testing.T) {
	a := byte(0x69)
	got := Bind(&a)
	err := got.Set("4")
	require.NoError(t, err)
	assert.NotEqual(t, byte(0x69), got.Get())
	assert.Equal(t, byte(0x34), got.Get())
}
