// Code generated by valuegenerator. DO NOT EDIT

package value

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func ptrToString(a string) *String {
	x := new(String)
	*x = String(a)
	return x
}

func stringPtr(a string) *string {
	x := new(string)
	*x = a
	return x
}

func TestString_Type(t *testing.T) {
	a := new(String)
	assert.Equal(t, "string", a.Type())
}

func TestString_Zero(t *testing.T) {
	a := new(string)
	b := new(String)
	assert.Equal(t, *a, b.Zero())
}

func TestString_Clone(t *testing.T) {
	a := new(String)
	b := a.Clone()
	assert.Equal(t, string(*a), b.Get())
	*a = String("rawr")
	assert.NotEqual(t, string(*a), b.Get())
}

type TestStringGetTest struct {
	name string
	a    *String
	want interface{}
}

func TestString_Get(t *testing.T) {
	for _, st := range testStringGetTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := tt.a.Get()
			assert.Equal(t, tt.want, got)
		})
	}
}

type TestStringSetTest struct {
	name    string
	s       string
	a       *String
	wantErr bool
}

func TestString_Set(t *testing.T) {
	for _, st := range testStringSetTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			err := tt.a.Set(tt.s)
			if tt.wantErr {
				assert.Error(t, err)
			} else {
				assert.NoError(t, err)
			}
		})
	}
}

type TestStringStringTest struct {
	name string
	a    *String
	want string
}

func TestString_String(t *testing.T) {
	for _, st := range testStringStringTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := tt.a.String()
			assert.Equal(t, tt.want, got)
		})
	}
}

type TestBindStringTest struct {
	name string
	x    *string
	want *String
}

func TestBindString(t *testing.T) {
	for _, st := range testBindStringTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := BindString(tt.x)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestFactoryBind_String(t *testing.T) {
	a := string("rawr")
	got := Bind(&a)
	err := got.Set("spam")
	require.NoError(t, err)
	assert.NotEqual(t, string("rawr"), got.Get())
	assert.Equal(t, string("spam"), got.Get())
}
