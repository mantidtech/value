// Code generated by valuegenerator. DO NOT EDIT

package value

import (
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
)

func TestFrom(t *testing.T) {
	tests := []struct {
		name string
		v    interface{}
		want Value
	}{
		{
			name: "bool",
			v:    bool(true),
			want: ptrToBool(true),
		},
		{
			name: "bool Ptr",
			v:    boolPtr(bool(true)),
			want: ptrToBool(true),
		},
		{
			name: "byte",
			v:    byte(0x69),
			want: ptrToByte(0x69),
		},
		{
			name: "byte Ptr",
			v:    bytePtr(byte(0x69)),
			want: ptrToByte(0x69),
		},
		{
			name: "complex64",
			v:    complex64(complex(12, 6)),
			want: ptrToComplex64(complex(12, 6)),
		},
		{
			name: "complex64 Ptr",
			v:    complex64Ptr(complex64(complex(12, 6))),
			want: ptrToComplex64(complex(12, 6)),
		},
		{
			name: "complex128",
			v:    complex128(complex(17, 72)),
			want: ptrToComplex128(complex(17, 72)),
		},
		{
			name: "complex128 Ptr",
			v:    complex128Ptr(complex128(complex(17, 72))),
			want: ptrToComplex128(complex(17, 72)),
		},
		{
			name: "float32",
			v:    float32(4.12890625),
			want: ptrToFloat32(4.12890625),
		},
		{
			name: "float32 Ptr",
			v:    float32Ptr(float32(4.12890625)),
			want: ptrToFloat32(4.12890625),
		},
		{
			name: "float64",
			v:    float64(5.5e32),
			want: ptrToFloat64(5.5e32),
		},
		{
			name: "float64 Ptr",
			v:    float64Ptr(float64(5.5e32)),
			want: ptrToFloat64(5.5e32),
		},
		{
			name: "int",
			v:    int(14),
			want: ptrToInt(14),
		},
		{
			name: "int Ptr",
			v:    intPtr(int(14)),
			want: ptrToInt(14),
		},
		{
			name: "int8",
			v:    int8(-2),
			want: ptrToInt8(-2),
		},
		{
			name: "int8 Ptr",
			v:    int8Ptr(int8(-2)),
			want: ptrToInt8(-2),
		},
		{
			name: "int16",
			v:    int16(25),
			want: ptrToInt16(25),
		},
		{
			name: "int16 Ptr",
			v:    int16Ptr(int16(25)),
			want: ptrToInt16(25),
		},
		{
			name: "int32",
			v:    int32(-500_125_432),
			want: ptrToInt32(-500_125_432),
		},
		{
			name: "int32 Ptr",
			v:    int32Ptr(int32(-500_125_432)),
			want: ptrToInt32(-500_125_432),
		},
		{
			name: "int64",
			v:    int64(74),
			want: ptrToInt64(74),
		},
		{
			name: "int64 Ptr",
			v:    int64Ptr(int64(74)),
			want: ptrToInt64(74),
		},
		{
			name: "string",
			v:    string("rawr"),
			want: ptrToString("rawr"),
		},
		{
			name: "string Ptr",
			v:    stringPtr(string("rawr")),
			want: ptrToString("rawr"),
		},
		{
			name: "time.Duration",
			v:    time.Duration(64000000),
			want: ptrToDuration(64000000),
		},
		{
			name: "time.Duration Ptr",
			v:    durationPtr(time.Duration(64000000)),
			want: ptrToDuration(64000000),
		},
		{
			name: "time.Time",
			v:    time.Time(time.Unix(1588998294, 12_000_000).In(time.UTC)),
			want: ptrToTime(time.Unix(1588998294, 12_000_000).In(time.UTC)),
		},
		{
			name: "time.Time Ptr",
			v:    timePtr(time.Time(time.Unix(1588998294, 12_000_000).In(time.UTC))),
			want: ptrToTime(time.Unix(1588998294, 12_000_000).In(time.UTC)),
		},
		{
			name: "uint",
			v:    uint(908),
			want: ptrToUint(908),
		},
		{
			name: "uint Ptr",
			v:    uintPtr(uint(908)),
			want: ptrToUint(908),
		},
		{
			name: "uint16",
			v:    uint16(50000),
			want: ptrToUint16(50000),
		},
		{
			name: "uint16 Ptr",
			v:    uint16Ptr(uint16(50000)),
			want: ptrToUint16(50000),
		},
		{
			name: "uint32",
			v:    uint32(78465734),
			want: ptrToUint32(78465734),
		},
		{
			name: "uint32 Ptr",
			v:    uint32Ptr(uint32(78465734)),
			want: ptrToUint32(78465734),
		},
		{
			name: "uint64",
			v:    uint64(6),
			want: ptrToUint64(6),
		},
		{
			name: "uint64 Ptr",
			v:    uint64Ptr(uint64(6)),
			want: ptrToUint64(6),
		},
	}
	for _, st := range tests {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := From(tt.v)
			assert.Equal(t, tt.want, got)
		})
	}
}

/*
func TestBind(t *testing.T) {
	tests := []struct {
		name   string
		one    interface{}
		two    string
		want   Value
	}{
		{
			name: "bool",
			one:  true,
			two:  "false",
			want: ptrToBool(true),
		},
		{
			name: "byte",
			one:  0x69,
			two:  "4",
			want: ptrToByte(0x69),
		},
		{
			name: "complex64",
			one:  complex(12, 6),
			two:  "-2+9i",
			want: ptrToComplex64(complex(12, 6)),
		},
		{
			name: "complex128",
			one:  complex(17, 72),
			two:  "3-91i",
			want: ptrToComplex128(complex(17, 72)),
		},
		{
			name: "float32",
			one:  4.12890625,
			two:  "-61724.0",
			want: ptrToFloat32(4.12890625),
		},
		{
			name: "float64",
			one:  5.5E32,
			two:  "-800.525",
			want: ptrToFloat64(5.5E32),
		},
		{
			name: "int",
			one:  14,
			two:  "2147483647",
			want: ptrToInt(14),
		},
		{
			name: "int8",
			one:  -2,
			two:  "50",
			want: ptrToInt8(-2),
		},
		{
			name: "int16",
			one:  25,
			two:  "8073",
			want: ptrToInt16(25),
		},
		{
			name: "int32",
			one:  -500_125_432,
			two:  "-306",
			want: ptrToInt32(-500_125_432),
		},
		{
			name: "int64",
			one:  74,
			two:  "-70368744177664",
			want: ptrToInt64(74),
		},
		{
			name: "string",
			one:  "rawr",
			two:  "spam",
			want: ptrToString("rawr"),
		},
		{
			name: "time.Duration",
			one:  64000000,
			two:  "98s",
			want: ptrToDuration(64000000),
		},
		{
			name: "time.Time",
			one:  time.Unix(1588998294, 12_000_000).In(time.UTC),
			two:  "2020-05-10T05:23:01Z",
			want: ptrToTime(time.Unix(1588998294, 12_000_000).In(time.UTC)),
		},
		{
			name: "uint",
			one:  908,
			two:  "19001",
			want: ptrToUint(908),
		},
		{
			name: "uint16",
			one:  50000,
			two:  "603",
			want: ptrToUint16(50000),
		},
		{
			name: "uint32",
			one:  78465734,
			two:  "31902",
			want: ptrToUint32(78465734),
		},
		{
			name: "uint64",
			one:  6,
			two:  "18446744073709551615",
			want: ptrToUint64(6),
		},
	}
	for _, st := range tests {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			a := tt.one
			got := Bind(&a)
			err := got.Set(tt.two)
			require.NoError(t, err)
			assert.Equal(t, tt.want, got)
		})
	}
}
*/
