// Code generated by valuegenerator. DO NOT EDIT

package value

import (
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func ptrToTime(a time.Time) *Time {
	x := new(Time)
	*x = Time(a)
	return x
}

func timePtr(a time.Time) *time.Time {
	x := new(time.Time)
	*x = a
	return x
}

func TestTime_Type(t *testing.T) {
	a := new(Time)
	assert.Equal(t, "time.Time", a.Type())
}

func TestTime_Zero(t *testing.T) {
	a := new(time.Time)
	b := new(Time)
	assert.Equal(t, *a, b.Zero())
}

func TestTime_Clone(t *testing.T) {
	a := new(Time)
	b := a.Clone()
	assert.Equal(t, time.Time(*a), b.Get())
	*a = Time(time.Unix(1588998294, 12_000_000).In(time.UTC))
	assert.NotEqual(t, time.Time(*a), b.Get())
}

type TestTimeGetTest struct {
	name string
	a    *Time
	want interface{}
}

func TestTime_Get(t *testing.T) {
	for _, st := range testTimeGetTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := tt.a.Get()
			assert.Equal(t, tt.want, got)
		})
	}
}

type TestTimeSetTest struct {
	name    string
	s       string
	a       *Time
	wantErr bool
}

func TestTime_Set(t *testing.T) {
	for _, st := range testTimeSetTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			err := tt.a.Set(tt.s)
			if tt.wantErr {
				assert.Error(t, err)
			} else {
				assert.NoError(t, err)
			}
		})
	}
}

type TestTimeStringTest struct {
	name string
	a    *Time
	want string
}

func TestTime_String(t *testing.T) {
	for _, st := range testTimeStringTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := tt.a.String()
			assert.Equal(t, tt.want, got)
		})
	}
}

type TestBindTimeTest struct {
	name string
	x    *time.Time
	want *Time
}

func TestBindTime(t *testing.T) {
	for _, st := range testBindTimeTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := BindTime(tt.x)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestFactoryBind_Time(t *testing.T) {
	a := time.Time(time.Unix(1588998294, 12_000_000).In(time.UTC))
	got := Bind(&a)
	err := got.Set("2020-05-10T05:23:01Z")
	require.NoError(t, err)
	assert.NotEqual(t, time.Time(time.Unix(1588998294, 12_000_000).In(time.UTC)), got.Get())
	assert.Equal(t, time.Time(time.Unix(1589088181, 0).In(time.UTC)), got.Get())
}
