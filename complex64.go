// Code generated by valuegenerator. DO NOT EDIT

package value

import (
	"fmt"
)

// Complex64 implements the value interface for the complex64 type
type Complex64 complex64

// Type returns the underlying type of the value as a string
func (c *Complex64) Type() string {
	return "complex64"
}

// Get returns the underlying value as an interface{}
func (c *Complex64) Get() interface{} {
	return complex64(*c)
}

// Set a value from a string
func (c *Complex64) Set(val string) error {
	var x complex64
	_, err := fmt.Sscan(val, &x)
	if err == nil {
		*c = Complex64(x)
	}
	return err
}

// String returns the value as a string
func (c *Complex64) String() string {
	x := fmt.Sprintf("%g", complex64(*c))
	if x[0] == '(' {
		l := len(x)
		x = x[1 : l-1]
	}
	return x
}

// Clone duplicates the Complex64 as a copy of the instance
func (c *Complex64) Clone() Value {
	ptr := new(Complex64)
	*ptr = *c
	return ptr
}

// Zero returns the zero value of the underlying primitive
func (c *Complex64) Zero() interface{} {
	ptr := new(complex64)
	return *ptr
}

// BindComplex64 returns a new Complex64 with the underlying complex64 used for state.
func BindComplex64(c *complex64) *Complex64 {
	return (*Complex64)(c)
}
