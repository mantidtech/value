// Code generated by valuegenerator. DO NOT EDIT

package value

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func ptrToInt32(a int32) *Int32 {
	x := new(Int32)
	*x = Int32(a)
	return x
}

func int32Ptr(a int32) *int32 {
	x := new(int32)
	*x = a
	return x
}

func TestInt32_Type(t *testing.T) {
	a := new(Int32)
	assert.Equal(t, "int32", a.Type())
}

func TestInt32_Zero(t *testing.T) {
	a := new(int32)
	b := new(Int32)
	assert.Equal(t, *a, b.Zero())
}

func TestInt32_Clone(t *testing.T) {
	a := new(Int32)
	b := a.Clone()
	assert.Equal(t, int32(*a), b.Get())
	*a = Int32(-500_125_432)
	assert.NotEqual(t, int32(*a), b.Get())
}

type TestInt32GetTest struct {
	name string
	a    *Int32
	want interface{}
}

func TestInt32_Get(t *testing.T) {
	for _, st := range testInt32GetTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := tt.a.Get()
			assert.Equal(t, tt.want, got)
		})
	}
}

type TestInt32SetTest struct {
	name    string
	s       string
	a       *Int32
	wantErr bool
}

func TestInt32_Set(t *testing.T) {
	for _, st := range testInt32SetTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			err := tt.a.Set(tt.s)
			if tt.wantErr {
				assert.Error(t, err)
			} else {
				assert.NoError(t, err)
			}
		})
	}
}

type TestInt32StringTest struct {
	name string
	a    *Int32
	want string
}

func TestInt32_String(t *testing.T) {
	for _, st := range testInt32StringTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := tt.a.String()
			assert.Equal(t, tt.want, got)
		})
	}
}

type TestBindInt32Test struct {
	name string
	x    *int32
	want *Int32
}

func TestBindInt32(t *testing.T) {
	for _, st := range testBindInt32TestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := BindInt32(tt.x)
			assert.Equal(t, tt.want, got)
		})
	}
}
func TestFactoryBind_Int32(t *testing.T) {
	a := int32(-500_125_432)
	got := Bind(&a)
	err := got.Set("-306")
	require.NoError(t, err)
	assert.NotEqual(t, int32(-500_125_432), got.Get())
	assert.Equal(t, int32(-306), got.Get())
}
