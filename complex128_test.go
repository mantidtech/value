// Code generated by valuegenerator. DO NOT EDIT

package value

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func ptrToComplex128(a complex128) *Complex128 {
	x := new(Complex128)
	*x = Complex128(a)
	return x
}

func complex128Ptr(a complex128) *complex128 {
	x := new(complex128)
	*x = a
	return x
}

func TestComplex128_Type(t *testing.T) {
	a := new(Complex128)
	assert.Equal(t, "complex128", a.Type())
}

func TestComplex128_Zero(t *testing.T) {
	a := new(complex128)
	b := new(Complex128)
	assert.Equal(t, *a, b.Zero())
}

func TestComplex128_Clone(t *testing.T) {
	a := new(Complex128)
	b := a.Clone()
	assert.Equal(t, complex128(*a), b.Get())
	*a = Complex128(complex(17, 72))
	assert.NotEqual(t, complex128(*a), b.Get())
}

type TestComplex128GetTest struct {
	name string
	a    *Complex128
	want interface{}
}

func TestComplex128_Get(t *testing.T) {
	for _, st := range testComplex128GetTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := tt.a.Get()
			assert.Equal(t, tt.want, got)
		})
	}
}

type TestComplex128SetTest struct {
	name    string
	s       string
	a       *Complex128
	wantErr bool
}

func TestComplex128_Set(t *testing.T) {
	for _, st := range testComplex128SetTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			err := tt.a.Set(tt.s)
			if tt.wantErr {
				assert.Error(t, err)
			} else {
				assert.NoError(t, err)
			}
		})
	}
}

type TestComplex128StringTest struct {
	name string
	a    *Complex128
	want string
}

func TestComplex128_String(t *testing.T) {
	for _, st := range testComplex128StringTestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := tt.a.String()
			assert.Equal(t, tt.want, got)
		})
	}
}

type TestBindComplex128Test struct {
	name string
	x    *complex128
	want *Complex128
}

func TestBindComplex128(t *testing.T) {
	for _, st := range testBindComplex128TestData {
		tt := st
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := BindComplex128(tt.x)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestFactoryBind_Complex128(t *testing.T) {
	a := complex128(complex(17, 72))
	got := Bind(&a)
	err := got.Set("3-91i")
	require.NoError(t, err)
	assert.NotEqual(t, complex128(complex(17, 72)), got.Get())
	assert.Equal(t, complex128(complex(3, -91)), got.Get())
}
