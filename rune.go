// Code generated by valuegenerator. DO NOT EDIT

package value

import (
	"fmt"
	"unicode/utf8"
)

// Rune implements the value interface for the rune type
type Rune rune

// Type returns the underlying type of the value as a string
func (r *Rune) Type() string {
	return "rune"
}

// Get returns the underlying value as an interface{}
func (r *Rune) Get() interface{} {
	return rune(*r)
}

// Set a value from a string
func (r *Rune) Set(val string) error {
	rs := []rune(val)
	if len(rs) != 1 {
		return fmt.Errorf("string wrong size '%s' (%d runes) to convert to rune", val, len(rs))
	}
	x, _ := utf8.DecodeRuneInString(val)
	*r = Rune(x)
	return nil
}

// String returns the value as a string
func (r *Rune) String() string {
	return string(*r)
}

// Clone duplicates the Rune as a copy of the instance
func (r *Rune) Clone() Value {
	ptr := new(Rune)
	*ptr = *r
	return ptr
}

// Zero returns the zero value of the underlying primitive
func (r *Rune) Zero() interface{} {
	ptr := new(rune)
	return *ptr
}

// BindRune returns a new Rune with the underlying rune used for state.
func BindRune(r *rune) *Rune {
	return (*Rune)(r)
}
