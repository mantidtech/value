// Code generated by valuegenerator. DO NOT EDIT

package value

import (
	"fmt"
)

// Complex128 implements the value interface for the complex128 type
type Complex128 complex128

// Type returns the underlying type of the value as a string
func (c *Complex128) Type() string {
	return "complex128"
}

// Get returns the underlying value as an interface{}
func (c *Complex128) Get() interface{} {
	return complex128(*c)
}

// Set a value from a string
func (c *Complex128) Set(val string) error {
	var x complex64
	_, err := fmt.Sscan(val, &x)
	if err == nil {
		*c = Complex128(x)
	}
	return err
}

// String returns the value as a string
func (c *Complex128) String() string {
	x := fmt.Sprintf("%g", complex128(*c))
	if x[0] == '(' {
		l := len(x)
		x = x[1 : l-1]
	}
	return x
}

// Clone duplicates the Complex128 as a copy of the instance
func (c *Complex128) Clone() Value {
	ptr := new(Complex128)
	*ptr = *c
	return ptr
}

// Zero returns the zero value of the underlying primitive
func (c *Complex128) Zero() interface{} {
	ptr := new(complex128)
	return *ptr
}

// BindComplex128 returns a new Complex128 with the underlying complex128 used for state.
func BindComplex128(c *complex128) *Complex128 {
	return (*Complex128)(c)
}
